[project]
name = "template_project_name"
#version = "0.0.0"
dynamic = ["version"]
description = ""
authors = []
dependencies = ["loguru>=0.7.0", "typer>=0.15.2", "pre-commit>=4.2.0", "radon>=6.0.1", "pytest-watch>=4.2.0"]
requires-python = ">=3.12"
readme = "README.md"

[project.scripts]
template_project_name = "template_project_name.cli:main"

[dependency-groups]
dev = [
    "tox>=4.25.0",
    "tox-pdm>=0.7.2",
    "radon>=5.1.0",
    "pre-commit>=4.2.0",
    "detect-secrets>=1.5.0",
]

test = [
    "pytest>=8.3.5",
    "pytest-watch>=4.2.0",
    "pytest-cov>=6.2.1",
    "pytest-html>=4.1.1",
    "pytest-xdist>=3.7.0",
    "pytest-sugar>=1.0.0",
]

# Linting 相关的依赖
lint = [
    "ruff>=0.12.0",
]
# 类型检查相关的依赖
type = [
    "mypy>=1.15.0",
]

[tool.builder-opt]
#============================================================
# build python file to so and pack it as wheel file
# to use this build, you must add the setuptools build system
# [build-system]
# requires = ["setuptools", "wheel", "Cython", "setuptools-scm"]
# build-backend = "setuptools.build_meta"

# add the cli submodule to so builder
cython_modules_path = [
    "src/template_project_name/utils", 
    "src/template_project_name/cli", 
#   "src/template_project_name", # If you want compile the project/__init__.py into "so" format, use this line. It need all sub modules support Cython compile
]
#============================================================


[tool.setuptools_scm]
tag_regex = '^v(\d+\.\d+\.\d+)$'
fallback_version = "0.1.0"

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
select = ["E4", "E7", "E9", "F", "E501"]
ignore = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"


[tool.radon]
# 设置圈复杂度的阈值，超过10则评级为 C，超过20则评级为 F
cc_max = "C"
cc_min = "A"
# 设置可维护性指数的阈值
mi_min = "A"

[tool.pytest.ini_options]
# testpaths = tests
testpaths = ["tests"]

# 将命令行参数移到这里，这是 addopts 的核心用途
addopts = [
    "--strict-markers",       # 防止因拼写错误的 marker 导致测试被静默跳过
    "--strict-config",
    "--cov",                # 启用代码覆盖率
    "--cov-append",           # 追加覆盖率数据，对于并行测试或多次运行很有用
    "--cov-report=term-missing", # 在终端显示覆盖率报告，并高亮未覆盖的行
    "--html=htmlcov/report.html", # 生成 HTML 格式的测试报告
    "-n=auto",                # 自动根据 CPU 核心数并行执行测试 (来自 pytest-xdist)
    "--color=yes",            # 强制输出彩色日志
]

# 注册自定义 Marker，避免 --strict-markers 报错
# 这对于分组测试非常有用，例如: @pytest.mark.slow
markers = [
    "stone: 安全网测试。数量少，覆盖小，代表用户使用程序最基本的用法，用于在重构中作为测试的基石",
    "stable: 重要、基础且稳定的 Api 和组件",
    "alpha: 重要、基础但在未来可能发生变动的 Api 和组件",
    "beta: 开发中，很可能剧烈变动或被移除的Api, 且影响范围较 alpha 小",
    "fast: Run fast and no IO, less resources",
    "slow: Run slow, need more resources",
    "gpu: Must run with gpu environment",
    "doing: doing tag, less than 3 features at a time",
    "todo: todo tag, less than 10 features at a time",
    "maybe: maybe tag",
    "onetime: one-time tests, use it like archive",
    "deprecated: deprecated api's test",
    "smoke: Smoke tests for basic functionality, like stone but less important and not running in develop, useful for AI project e.g. small data patch test",
]


# 过滤掉一些无关的警告，保持测试输出干净
filterwarnings = [
    "ignore::DeprecationWarning", # 示例：忽略所有弃用警告
]

[tool.mypy]
python_version = "3.12"
disallow_untyped_defs = false
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true


[tool.pdm.scripts]
template_project_name = "template_project_name.cli:main"
clean = "sh -c 'rm -rf build dist src/template_project_name/**/*.c src/template_project_name/**/*.so src/*.egg-info'" # remove build effect
watch = "ptw" # pytest-watch
lint = "pdm run pre-commit run --all-files"

[tool.pdm.options]
build = ["--no-sdist", "-v"] 

[tool.pdm.version]
source = "scm"
tag_regex = '^v(\d+\.\d+\.\d+)$'

